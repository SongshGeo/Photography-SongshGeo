name: Tests

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'scripts/**'
      - 'tests/**'
      - 'requirements-dev.txt'
      - 'pytest.ini'
  pull_request:
    branches: [ main, dev ]
    paths:
      - 'scripts/**'
      - 'tests/**'
      - 'requirements-dev.txt'
      - 'pytest.ini'

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run tests with pytest
      run: |
        pytest --cov=scripts --cov-report=xml --cov-report=term -v
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Generate coverage badge
      if: matrix.python-version == '3.11' && github.ref == 'refs/heads/main'
      run: |
        coverage_percent=$(coverage report --precision=0 | grep TOTAL | awk '{print $4}' | sed 's/%//')
        echo "Coverage: ${coverage_percent}%"
        echo "COVERAGE=${coverage_percent}" >> $GITHUB_ENV

  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
    
    - name: Check formatting with black
      run: |
        black --check scripts/ tests/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only scripts/ tests/
    
    - name: Lint with flake8
      run: |
        flake8 scripts/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 scripts/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

